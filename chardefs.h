#ifndef CHARDEFS_H
#define CHARDEFS_H
#include <stdint.h>
#define byte uint8_t

//bit order for transposing (flipping) numeric digits
const byte trn[16]=
{
  1, //0
  0, //1
  15,//2
  14,//3
  13,//4
  12,//5
  11,//6
  10,//7
  8, //6
  9, //9
  7, //10
  6, //11
  5, //12
  4, //13
  3, //14
  2  //15
};

//bit order for flipping character digits
const byte tra[16]=
{
  2, //0
  1, //1
  0, //2
  15,//3
  14,//4
  13,//5
  12,//6
  11,//7
  8, //8
  9, //9
  10,//10
  7, //11
  6, //12
  5, //13
  4, //14
  3, //15
};
void hskshiftOut(byte hsdataPins[], byte data[], byte hsclockPin, byte hslatchPin);
uint16_t anch(char in);
void fdisp();
void splash(char message[8], unsigned int del);
uint16_t transpose(uint16_t in, byte* pat);

/*
 =====
|\ | /|
| \|/ |
 =====
| /|\ |
|/ | \|
 =====
 
 BBBBBBBBBBB
0 C   D   E F
0  C  D  E  F
0   C D E   F
 11111111111
3   4 5 6   2
3  4  5  6  2
3 4   5   6 2
 77777777777


8, 9, and A are extras.

*/

//letters for alphanumeric digits
const uint16_t lcLetters[] = 
{
  //0123456789ABCDEF
  0b1111000000010001, //A
  0b0110010100010101, //B
  0b1001000100010000, //C
  0b0010010100010101, //D
  0b1101000100010000, //E
  0b1101000000010000, //F
  0b1011000100010000, //G
  0b1111000000000001, //H
  0b0000010100010100, //I
  0b0011000100010001, //J
  0b1111000000000010, //K
  0b1001000100000000, //L
  0b1011000000001011, //M
  0b1011001000001001, //N
  0b1011000100010001, //O
  0b1101000000010001, //P
  0b1011001100010001, //Q
  0b1101001000010001, //R
  0b1110000100010000, //S
  0b0000010000010100, //T
  0b1011000100000001, //U
  0b1010001000000001, //V
  0b1011101000000001, //W
  0b0000101000001010, //X
  0b1110000100000001, //Y
  0b0000100100010010, //Z
  0b1001000100010000, //[
  0b0000001000001000, //\_ //backslashes are weird
  0b0010000100010001, //]
  0b0000000000011010, //^
  0b0000000100000000, //_
  0b0000000000001000, //`
  0b0111000100010001, //a
  0b1111000100000000, //b
  0b0101000100000000, //c
  0b0111000100000001, //d
  0b0101100100000000, //e
  0b0100010000000010, //f
  0b1110100100010001, //g
  0b1111000000000000, //h
  0b0000010000000100, //i
  0b0010100100000001, //j
  0b1001001000000010, //k
  0b1001100000000000, //l
  0b0111010000000000, //m
  0b0111000000000000, //n
  0b0111000100000000, //o
  0b0100010000010101, //p
  0b1100001000010001, //q
  0b0101000000000000, //r
  0b0000001100011000, //s
  0b0100010000000100, //t
  0b0011000100000000, //u
  0b0010001000000000, //v
  0b0011101000000000, //w
  0b0000101000001010, //x
  0b0000010000001010, //y
  0b0100100100000000, //z
};

//numbers for alphanumeric digits
const uint16_t anums[10]=
{
  //0123456789X12345
  0b1011100100010011, //0
  0b0010000000000001, //1
  0b0101000100010001, //2
  0b0110000100010001, //3
  0b1110000000000001, //4
  0b1110000100010000, //5
  0b1111000100010000, //6
  0b0000010000010010, //7
  0b1111000100010001, //8
  0b1110000100010001, //9
  //0123456789X12345
};

//numbers for seven segment digits 
// (not suitable for direct assignment)
const uint8_t nnums[16] = 
{
  //1234567
  0b1110111, //0
  0b0100100, //1
  0b1101011, //2
  0b1101101, //3
  0b0111100, //4
  0b1011101, //5
  0b1011111, //6
  0b1100100, //7
  0b1111111, //8
  0b1111101, //9
  0b1111110, //A
  0b0011111, //B
  0b1010011, //C
  0b0101111, //D
  0b1011011, //E
  0b1011010, //F
  
};

const char cmax='z'; //highest recognized character

unsigned int splashdel=0; //for splash messages
//char splashmsg[8]; //ditto
char* splashmsg;


#endif
